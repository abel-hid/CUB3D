void moveForward(struct Player *player, double speed) {
    player->x += speed * cos(player->angle);
    player->y += speed * sin(player->angle);
}

// Function to move the player backward
void moveBackward(struct Player *player, double speed) {
    player->x -= speed * cos(player->angle);
    player->y -= speed * sin(player->angle);
}

// Function to strafe the player left
void strafeLeft(struct Player *player, double speed) {
    player->x -= speed * cos(player->angle + M_PI / 2);
    player->y -= speed * sin(player->angle + M_PI / 2);
}

// Function to strafe the player right
void strafeRight(struct Player *player, double speed) {
    player->x += speed * cos(player->angle + M_PI / 2);
    player->y += speed * sin(player->angle + M_PI / 2);
}

// Update function to handle player movement based on user input
void updatePlayer(struct Player *player) {
    // Check for user input (e.g., arrow keys) and update player position accordingly
    // Example: If the up arrow key is pressed, move the player forward
    if (upArrowKeyPressed) {
        moveForward(player, movementSpeed);
    }
    // Example: If the down arrow key is pressed, move the player backward
    if (downArrowKeyPressed) {
        moveBackward(player, movementSpeed);
    }
    // Example: If the left arrow key is pressed, strafe the player left
    if (leftArrowKeyPressed) {
        strafeLeft(player, movementSpeed);
    }
    // Example: If the right arrow key is pressed, strafe the player right
    if (rightArrowKeyPressed) {
        strafeRight(player, movementSpeed);
    }

    // Additional logic for other user input (e.g., rotation) can be added here
}

// Main game loop
while (gameIsRunning) {
    // Update player position based on user input
    updatePlayer(&player);

    // Recalculate rays and perform raycasting
    // ...

    // Render the scene
    // ...

    // Handle other game logic and events
    // ...

    // Repeat the loop
}

// Display the rendered image
